package main;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import org.json.JSONException;
import org.json.JSONObject;
//import checkstyle.clientmessage.Client;
//import checkstyle.clientmessage.MessageReceiver;
import hermes.messagebus.client.library.MessageReceiver;
import hermes.messagebus.client.library.Client;

public class AFileMessage {
	
	Client clientThread;
	private static final String TAGS = ".*";

	public static void main(String[] args) {
		new AFileMessage().go();
	}
	
	private void go() {
	    clientThread = new Client(TAGS, (MessageReceiver) this);
	}
	

	public void receiveMessage(String message) throws JSONException {
		JSONObject msgObj = new JSONObject(message);
		String from = msgObj.getString("from");
		String editorContents = msgObj.getString("editorContents");
		
		ArrayList styleCheck = classSeparator(from, editorContents);
		
		JSONObject messageToSend = new JSONObject();
		messageToSend.put("to", from);
		for(int i = 0; i < styleCheck.size(); i++){
			messageToSend.put("result", styleCheck.get(i));
			clientThread.sendMessageToUser(messageToSend.toString());
		}
	}

	static void receiveMessage(String aUserName, String aText){
		BufferedWriter bw = null;
		FileWriter fw = null;
		String osName = System.getProperty("os.name");
		String username = System.getProperty("user.name");
		String pathname = "";
		
		ArrayList<String> className = publicClassChecker(aText);
		ArrayList<File> filepathName = new ArrayList<File>();
		
		if(osName.contains("Mac")){
			//Creating the folder with the name given by the string, aUserName
			pathname = "/Users/" + username + "/Desktop" + aUserName;
			File folder = new File(pathname);
			for(int i = 0; i < className.size(); i++){
				String filepath = pathname + "/" + className.get(i);
				File codeFile = new File(pathname);
				filepathName.add(codeFile);
			}

			try{
				if(folder.exists()){
					System.out.println("Folder " + folder.getName() + " already exists");
				}
				else{
					folder.mkdir();
					System.out.println("Folder " + folder.getName() + " was created!");
				}
			}catch (Exception e){
				e.printStackTrace();
			}

			try{
				for(int i = 0; i < className.size(); i++){
					//this is used to create the file (if it doesn't exist already in that folder)
					if(filepathName.get(i).createNewFile()){
						System.out.println("File " + filepathName.get(i).getName() + " was created!");
					}
					else{
						System.out.println("File " + filepathName.get(i).getName() + " already exists");
					}
				}
			}catch (Exception e){
				e.printStackTrace();
			}

			try {
				for(int i = 0; i < className.size(); i++){
					//This is writing the string aText into the file
					fw = new FileWriter(filepathName.get(i).getAbsoluteFile(), false);
					bw = new BufferedWriter(fw);
	
					bw.write(aText);
				}

			} catch (IOException e) {
				e.printStackTrace();
			} finally {

				try {

					if (bw != null)
						bw.close();

					if (fw != null)
						fw.close();

				} catch (IOException ex) {

					ex.printStackTrace();
				}
			}
			
			ACheckStyleRunner styleChecker = new ACheckStyleRunner();
			for(int i = 0; i < className.size(); i++){
				styleChecker.checkStyle(pathname);
			}
			
		}else if(osName.contains("Windows")){
			pathname = "C:\\Users\\" + username + "\\Desktop\\" + aUserName;
			pathname = pathname.replace("\\","/");
			File folder = new File(pathname);
			for(int i = 0; i < className.size(); i++){
				String filePathName = pathname + "\\" + className.get(i);
				filePathName = filePathName.replace("\\", "/");
				File codeFile = new File(filePathName);
				filepathName.add(codeFile);
			}
			
			try{
				if(folder.exists()){
					System.out.println("Folder " + folder.getName() + " already exists");
				}
				else{
					folder.mkdir();
					System.out.println("Folder " + folder.getName() + " was created!");
				}
			}catch (Exception e){
				e.printStackTrace();
			}

			try{
				for(int i = 0; i < className.size(); i++){
					//this is used to create the file (if it doesn't exist already in that folder)
					if(filepathName.get(i).createNewFile()){
						System.out.println("File " + filepathName.get(i).getName() + " was created!");
					}
					else{
						System.out.println("File " + filepathName.get(i).getName() + " already exists");
					}
				}
			}catch (Exception e){
				e.printStackTrace();
			}

			try {
				for(int i = 0; i < className.size(); i++){
					//This is writing the string aText into the file
					fw = new FileWriter(filepathName.get(i).getAbsoluteFile(), false);
					bw = new BufferedWriter(fw);
	
					bw.write(aText);
				}

			} catch (IOException e) {
				e.printStackTrace();
			} finally {

				try {

					if (bw != null)
						bw.close();

					if (fw != null)
						fw.close();

				} catch (IOException ex) {

					ex.printStackTrace();
				}
			}
			ACheckStyleRunner styleChecker = new ACheckStyleRunner();
			for(int i = 0; i < className.size(); i++){
				styleChecker.checkStyle(pathname);
			}
		}
		
	}
	
	static ArrayList publicClassChecker(String aText){
		ArrayList<String> className = new ArrayList<String>();
		int numPublicClasses = 0;
		String nameClass = "";
		for(int i = 12; i < aText.length(); i++){
			String name = aText.substring(i - 12, i);
			if(name.equals("public class")){
				numPublicClasses++;
				int j = i + 1;
				while(aText.charAt(j) != '{' && aText.charAt(j) != ' '){
					j++;
				}
				nameClass = aText.substring(i + 1, j);
				className.add(nameClass);
				i = j + 1;
			}
		}
		return className;
	}

	static ArrayList classSeparator(String aUserName, String aText){
		ArrayList<String> codeText = new ArrayList<String>();
		String[] textCode = aText.split("(?=public class)");
		int numSplits = textCode.length;
		for(int i = 0; i < numSplits; i++){
			codeText.add(textCode[i]);
		}
		for(int i = 1; i < numSplits; i++){
			String text = textCode[0] + textCode[i];
			receiveMessage(aUserName, text);
		}
		
		return codeText;		
	}
}


